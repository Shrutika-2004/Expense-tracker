import java.io.*;
import java.util.*;

class User {
    private String username;
    private String password;

    public User(String username, String password) {
        this.username = username;
        this.password = password;
    }

    public String getUsername() {
        return username;
    }

    public String getPassword() {
        return password;
    }
}

class Expense {
    private String date;
    private String category;
    private double amount;

    public Expense(String date, String category, double amount) {
        this.date = date;
        this.category = category;
        this.amount = amount;
    }

    public String getDate() {
        return date;
    }

    public String getCategory() {
        return category;
    }

    public double getAmount() {
        return amount;
    }

    @Override
    public String toString() {
        return "Date: " + date + ", Category: " + category + ", Amount: $" + amount;
    }
}

class FileHandler {
    public static void saveExpenses(List<Expense> expenses, String filename) {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(filename))) {
            oos.writeObject(expenses);
        } catch (IOException e) {
            System.err.println("Error saving expenses: " + e.getMessage());
        }
    }

    @SuppressWarnings("unchecked")
    public static List<Expense> loadExpenses(String filename) {
        List<Expense> expenses = new ArrayList<>();
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filename))) {
            expenses = (List<Expense>) ois.readObject();
        } catch (IOException | ClassNotFoundException e) {
            System.err.println("Error loading expenses: " + e.getMessage());
        }
        return expenses;
    }
}

class ExpenseTracker {
    private List<Expense> expenses;
    private User user;

    public ExpenseTracker() {
        this.expenses = new ArrayList<>();
    }

    public void registerUser(String username, String password) {
        this.user = new User(username, password);
        System.out.println("User registered successfully!");
    }

    public void addExpense(String date, String category, double amount) {
        expenses.add(new Expense(date, category, amount));
        System.out.println("Expense added successfully!");
    }

    public void listExpenses() {
        if (expenses.isEmpty()) {
            System.out.println("No expenses recorded.");
            return;
        }
        System.out.println("Expenses:");
        for (Expense expense : expenses) {
            System.out.println(expense);
        }
    }

    public void categoryWiseSummation() {
        Map<String, Double> categoryTotals = new HashMap<>();
        for (Expense expense : expenses) {
            categoryTotals.put(expense.getCategory(), categoryTotals.getOrDefault(expense.getCategory(), 0.0) + expense.getAmount());
        }
        System.out.println("Category-wise Summation:");
        for (Map.Entry<String, Double> entry : categoryTotals.entrySet()) {
            System.out.println("Category: " + entry.getKey() + ", Total: $" + entry.getValue());
        }
    }

    public void saveExpenses(String filename) {
        FileHandler.saveExpenses(expenses, filename);
    }

    public void loadExpenses(String filename) {
        expenses = FileHandler.loadExpenses(filename);
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ExpenseTracker tracker = new ExpenseTracker();
        String filename = "expenses.dat";

        // Load existing expenses
        tracker.loadExpenses(filename);

        // User Registration
        System.out.print("Enter username: ");
        String username = scanner.nextLine();
        System.out.print("Enter password: ");
        String password = scanner.nextLine();
        tracker.registerUser(username, password);

        // Expense Management
        while (true) {
            System.out.println("\n1. Add Expense\n2. List Expenses\n3. Category-wise Summation\n4. Save & Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter date (YYYY-MM-DD): ");
                    String date = scanner.nextLine();
                    System.out.print("Enter category: ");
                    String category = scanner.nextLine();
                    System.out.print("Enter amount: ");
                    double amount = scanner.nextDouble();
                    tracker.addExpense(date, category, amount);
                    break;
                case 2:
                    tracker.listExpenses();
                    break;
                case 3:
                    tracker.categoryWiseSummation();
                    break;
                case 4:
                    tracker.saveExpenses(filename);
                    System.out.println("Expenses saved. Exiting...");
                    return;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }
}
